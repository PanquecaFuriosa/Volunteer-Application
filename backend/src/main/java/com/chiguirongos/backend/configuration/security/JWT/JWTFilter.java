package com.chiguirongos.backend.configuration.security.JWT;

import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.chiguirongos.backend.configuration.security.JPAUsersDetailsService;
import com.chiguirongos.backend.configuration.security.SecurityConstants;
import com.chiguirongos.backend.exceptions.runtime.SuspendedUserException;

import io.jsonwebtoken.JwtException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * JWT Filter implementations.
 * Authenticates an user using a JWT cookie
 * generated by the server.
 */
@Component
public class JWTFilter extends OncePerRequestFilter {

    @Autowired
    private JPAUsersDetailsService usersDetailsService;
    private Logger logger = LogManager.getLogger();

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        logger.info("Starting JWT filter");
        Cookie jwtCookie = null;
        // We look at the cookies.
        if (request.getCookies() != null) {
            jwtCookie = findJWTCookie(request);

            // If we find a JWT cookie, we try to authenticate the user
            if (jwtCookie != null) {
                String jwtToken = jwtCookie.getValue();
                try {
                    if (JWTSecurityUtils.validateToken(jwtToken, SecurityConstants.JWT_AUTH_SECRET)) {
                        String username = JWTSecurityUtils.getAuthUserFromJWT(jwtToken);
                        setUserAuth(request, username);
                    }
                } catch (JwtException e) {
                    logger.error("JWT Exception: " + e.getMessage());
                    response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
                    return;
                }
                catch (SuspendedUserException e) {
                    logger.error("User suspended");
                    response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
                    return;
                }
            }
        }

        logger.info("Finishing JWT filter");
        filterChain.doFilter(request, response);
    }

    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {
        return request.getRequestURL().toString().contains("/admin/")
                || !request.getRequestURL().toString().contains("/api/");
    }

    /**
     * Retrieves the JWT authentication/authorization cookie
     * from an HttpServletRequest.
     * 
     * @param request Request to retrieve cookie from.
     * @return The cookie JWT in case the request contains it/Null otherwise.
     */
    private Cookie findJWTCookie(HttpServletRequest request) {
        for (Cookie cookie : request.getCookies()) {
            if (!cookie.getName().equals(SecurityConstants.AUTH_COOKIE_NAME))
                continue;

            return cookie;
        }
        return null;
    }

    /**
     * Sets the user authentication context.
     * 
     * @param request Request made for the system.
     */
    private void setUserAuth(HttpServletRequest request, String username) {
        UserDetails userDetails = usersDetailsService.loadUserByUsername(username);
        if (!userDetails.isAccountNonLocked())
            throw new SuspendedUserException();

        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(
                userDetails.getUsername(),
                userDetails.getPassword(), 
                userDetails.getAuthorities());

        auth.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

        /**
         * Shouldnt thi be S SecurityContextHolder.createEmptyContext();
         * to prevent race conditions with other threads?
         */
        SecurityContextHolder.getContext().setAuthentication(auth);
    }
}
